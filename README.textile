h1. rah_function

p. Every function is a @<txp:tag />@. Rah_function allows you to call any PHP function in Textpattern's tag syntax. No need for PHP snippets, ending nor closing PHP tags -- only thing you need is a XML like tag.

h2. List of features

* Call any PHP function with a single TXP tag.
* Freely use function's attributes, flags and parameters.
* Supports both, a container and a single tag format.

h2. Requirements

* Textpattern 4.0.7 or newer.

h2. Installation

p. Rah_function's installation follows the usual standard plugin installation steps.

# Download the plugin installation code.
# Copy and paste installation code into your Textpattern installation's Plugin pane's "Install plugin" box.
# Run the automated setup.
# After the setup is done, activate the plugin. Done.

p. The plugin respects Textpattern's scripting preferences. After installation make sure that you have allowed PHP scripting:

# Go to Textpattern's Advanced Preferences (Textpattern > Admin > Preferences > Advanced).
# Toggle allow on PHP scripting for Pages and Articles (or for where you want to use the plugin).

h2. Tag attributes

bc. <txp:rah_function call="function" thing="here" parameter1="value" parameter2="value">
	Contained statement
</txp:rah_function>

p. The plugin introduces a new tag, @<txp:rah_function />@. It's a multi-purpose tag that allows to use public PHP functions and methods as Textpattern tags. The tag can be used both as container and in self-closing mode. Attributes for the are as follows.

p. *call*
The name of the function or class method you want to use with the tag. Comma-separated if multiple. This attribute is required.
Example: @call="base64_encode"@ Default: @""@

p. *thing*
With thing you can choose the argument place for container mode's contained statement. For example, if @thing="here"@ is the last defined attribute in the tag, then the contained statement is used as the last argument too for the PHP function. If @thing@ is left undefined, contained statement is used as the first argument.
Example: @foo="bar" thing="here" bar="foo"@ Default: _undefined_.

p. *parameter1="" , parameter2="" , parameter3="",[..]*
Zero or more parameters passed to the called function as arguments. Theses additional tag attributes can be named anything. The parameters are assigned to the function in the order they are defined in the tag.
Example: @foo2="bar" foo1="bar" foo4="bar"@ Default: _undefined_.

h2. Tag basics

p. The tag, @<txp:rah_function />@, is almost like a bridge between PHP and Textpattern tag syntax. It allows calling almost any PHP function as a Textpattern tag. Want to encode something? You can. Want use PHP's string functions to truncate, count and modify strings? You can. All without needing to write code for new tags, or add raw PHP blocks in page templates.

h3. As a container

p. The tag supports both a container and self-closing usage. If the tag is used in a container format, the contained statement is used in the parameter position specified with the tag's @thing="here"@ attribute. If @thing@ attribute is undefined, contained statement is used as the PHP function's first parameter.

bc. <txp:rah_function call="str_replace" from="Hi" to="Hello" thing="here">
	Hi World!
</txp:rah_function>

p. In the snippet above, the contained statement @Hi World!@ is used as "str_replace":http://php.net/manual/en/function.str-replace.php function's third parameter as that is where the @thing="here"@ is. The snippet returns @Hello World!@, as expected. If @thing@ attribute wasn't used, the contained statement would be used as first argument, leading to different results.

bc. <txp:rah_function call="str_replace" from="Hi" to="Hello">
	Hi World!
</txp:rah_function>

p. Still looks pretty much the same. But unlike previously with @thing@, now the tag returns @Hello@. Instead of the @to@ attribute, the contained statement would be used the searched needle in str_replace.

h3. Extra attributes and function parameters

p. Apart from tag's own reserved attributes, @thing@ and @call@, all attributes are passed to the called function as arguments in the order the attributes are defined. If no additional attributes are used, then the called PHP function is used as is, without arguments.

p. When calling "md5,":http://php.net/manual/en/function.md5.php the first attribute would be used as the string from which the hash is calculated.

bc. <txp:rah_function call="md5" str="apple" />

p. Above returns @1f3870be274f6c49b3e31a0c6728957f@, a MD5 hash of apple. 

h2. Calling multiple functions

p. Since version 0.5, a single tag can call multiple functions. This allows to further process output returned by a function with second or more functions. Calling multiple functions with a single tag instance is done by simply using comma-separated (@,@) list of functions in the @call@ attribute.

bc. <txp:rah_function call="strip_tags, trim">
	<p>Some markup to strip and surrounding white-space to trim.</p>
</txp:rah_function>

p. Specified functions are processed from left to right. In the above snippet, "strip_tags":http://php.net/manual/en/function.strip-tags.php would be run first, and its output would be then passed to "trim.":http://php.net/manual/en/function.trim.php

p. The first function in the list acts as the primary. The first function's output is passed by reference to following functions, and all tag attributes only apply to it.

p. Second or later functions do not get passed any attributes, and the passed output from the first function is assigned as functions' first parameter. Calling multiple functions works only if the following functions expect a single parameter. If the following functions require more than a one parameter, more than one @<txp:rah_function />@ tag is needed.

p. For example calling both "str_replace":http://www.php.net/manual/en/function.str-replace.php and "substr":http://www.php.net/manual/en/function.substr.php would require two tags as both require two or more parameters.

bc. <txp:rah_function call="str_replace" from="Hi" to="Hello">
	<txp:rah_function call="substr" string="Hello World!" start="0" end=7" />
</txp:rah_function>

h2. Returned values and legal types

p. Due the way how Textpattern's template language and PHP work, not every function's output can be returned to the template in their original format. The limitation comes in form of "types.":http://php.net/manual/en/language.types.php

p. Textpattern's markup language expects strings, and that is what we must give it. Rah_function returns values of types _integer_, _float_ and _string_ to the template as is, in their true presentation, with the expectation that the returned type is converted to a string by Textpattern.

p. Last from the scalars, boolean, is converted to a uppercase string @TRUE@ and @FALSE@. This is for allow detecting an empty string (@""@), numbers @1@, @0@ and booleans from each other. Otherwise in Textpattern's template context you would have no idea which is which.

p. For instance PHP's "strpos":http://www.php.net/manual/en/function.strpos.php returns an integer starting from zero (@0@), or a boolean @FALSE@, when no matches are found. When the output gets converted to a string, that zero and FALSE become the same, and there would be no way of knowing whether there were any matches.

bc. <txp:rah_function call="strpos" search="A">ABC, zero or false?</txp:rah_function>

p. If no conversion were done, above would return a zero/empty, but so it would if there was no matches. But with the conversion the position and boolean are distinguishable.

bc.. <txp:variable 
	name="matches"
	value='<txp:rah_function call="strpos" search="A">ABC, zero or false?</txp:rah_function>'
/>
<txp:if_variable name="matches" value="FALSE">
	No matches.
<txp:else />
	First match at <txp:variable name="matches" />
</txp:if_variable>

p. Returned "arrays":http://www.php.net/manual/en/language.types.array.php will be converted to "serialized":http://php.net/manual/en/function.serialize.php byte-stream representations. Rest of types including object, resource, NULL and callable will be discarded and a notice will be issued.

p. Discarding is done to prevent issues. The types that are not returned do not translate to the markup language, and are not usable in string context. Thus, they are not returned. While the illegal output will not be returned, the functions will still be executed. For instance, a class method that returns an object can still be executed just fine with rah_function. There just won't be any output apart from an error message.

h2. Advanced casting and special attribute prefixes

bc. <txp:rah_function 
	_boolAttr="boolean"
	_nullAttr="NULL"
	_intAttr="integer"
	_serializedAttr="serialized"
/>

p. To get around template languages type juggling limitations, rah_function packs a couple special attribute prefixes. These prefixes can be added before tag attribute names, allowing to cast values to different types before passing the attributes to the called function as arguments. These special attribute prefixes are @_bool@, @_null@, @_int@ and @_serialized@.

p. If a tag attribute is prefixed with @_bool@, the value is converted to a boolean type. The value is converted to @FALSE@ if it is empty (@""@), @0@ or uppercase string @FALSE@. If it's anything else, it becomes @TRUE@.

bc. <txp:rah_function call="function" _boolsilent="I become TRUE" _boolfalse="FALSE" />

p. Prefix @_null@ converts the value to NULL, no matter what the original value is.

bc. <txp:rah_function call="function" _nullvalue="NULL and do not care" />

p. The prefix @_int@ converts the value to integer, ensuring that the value is a safe, valid integer. Numeric values will be rounded towards zero, and non-numerical strings will be converted based on the initial portion of the string. If the attribute value starts with valid numeric data, this will be used as the value. Otherwise, the value becomes @0@ (zero).

bc. <txp:rah_function call="function" _intid="I will be zero" _intnumericval="247" />

p. Last is @_serialized@, a special type of prefix. Unlike others, it doesn't cast or convert values to different types. As mentioned previously in _Returned values and legal types_ section, arrays are converted and returned as serialized byte-stream representations. The @_serialized@ prefix allows using these serialized values again in a rah_function tag.

bc. <txp:rah_function call="implode" delim=", "  
	_serialized_value='<txp:rah_function call="explode" delim="|" r="value1|value2|value3" />' />

p. In the above "explode":http://php.net/manual/en/function.explode.php would return an serialized array after splitting the string into peaces by @|@. That serialized value would be returned to "implode":http://php.net/manual/en/function.implode.php which then converts that array to a string, each value separated by a comma. Converting initial value of @value1|value2|value3@ to @value1, value2, value3@.

h2. Function whitelisting

p. For added optional security, certain functions can be explicitly whitelisted. If whitelisting option is defined, then only those whitelisted functions can be called with a rah_function tag.

p. Whitelisting options can be set from Textpattern's @config.php@ (e.g. /textpattern/config.php) file, and doesn't take more than adding a single line to it. Rah_function expects a constant named @rah_function_whitelist@, populated with comma-separated list of function names.

bc. define('rah_function_whitelist', 'gps, ps, htmlspecialchars, str_replace');

p. Where @gps@, @ps@, @htmlspecialchars@ and @str_replace@ would be the allowed functions.

p. This whitelisting option is completely optional, and it doesn't need to be configured. It should be only used if you want to enable only certain functions for added security.

h2. Examples

h3. Replacing content using str_replace in a single tag mode

bc. <txp:rah_function call="str_replace" search="Hello" replace="Hi" subject="Hello world!" />

p. Returns: @Hi world!@

h3. Replacing content using str_replace and containers

p. Contained statement is used as "str_replace":http://php.net/manual/en/function.str-replace.php's _subject_ parameter. Wrapped content is positioned to correct location by using @thing="here"@ in the tag.

bc. <txp:rah_function call="str_replace" search="Hello" replace="Hi" thing="here">
	Hello world!
</txp:rah_function>

p. Returns: @Hi world!@

h3. Sanitizing and returning HTTP GET value

p. Returning GET/POST values and sanitizing the output can be done with a single rah_function tag instance by using plugin's multi-function call feature. First we would use Textpattern's @gps@ function to get a specific value, e.g. @theme@, and then prepare it for the page template by converting HTML's special characters to entities with "htmlspecialchars":http://php.net/manual/en/function.htmlspecialchars.php.

bc. <txp:rah_function call="gps, htmlspecialchars" name="theme" />

p. Above would return HTTP GET/POST param's, named @theme@, value. If requested value is @?theme=I<3TXP@, above would return safe string of @I&lt;3TXP@.

h3. Removing appending and prepending whitespace or other characters

p. PHP comes with couple useful functions for removing whitespace and other characters from the beginning and end of a string: "trim":http://php.net/manual/en/function.trim.php, "ltrim":http://php.net/manual/en/function.ltrim.php and "rtrim.":http://php.net/manual/en/function.rtrim.php Trim removes characters from both ends, while ltrim only touches beginning and rtrim() wants to be all rightful. All three can take up to two arguments. First one is string will will trimmed, and the second, list of character that are stripped. If no characters are specified, white-space is stripped.

h4. Stripping zeros from the beginning

p. Wrapped content is passed to ltrim, which is set to strip zeros (@0@) from the beginning of the string. Original value @000150@ is converted to @150@.

bc. <txp:rah_function call="ltrim" strip="0">000150</txp:rah_function>

h4. Stripping whitespace from the beginning and end

p. When no extra arguments is given to trim, it will strip any whitespace from the beginning and the end.

bc. <txp:rah_function call="trim">
	Hello World!
</txp:rah_function>

p. Returns @Hello World!@ without the indentation or linefeed at the end.

h3. Generating valid JavaScript array

p. The following example generates a valid "Javascript Array":https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array from a comma-separated list of values. It does that by taking advantage of rah_function's multi-function feature and uses PHP's "json_encode":http://php.net/manual/en/function.json-encode.php and Textpattern's do_list functions.

p. It first splits the string to a PHP array using do_list(). The do_list() will also take care of any white-space. It then converts that to a valid JSON representation using json_encode.

bc. <txp:rah_function call="do_list, json_encode">
	value1, value2, value3
</txp:rah_function>

p. Above returns @["value1","value2","value3"]@.

h3. Returning time using safe_strftime()

bc. <txp:rah_function call="safe_strftime">
	%Y
</txp:rah_function>

p. Returns: @2009@.

h3. Fetching a single field from the database with fetch() function

bc. <txp:rah_function call="fetch" what="last_access" from="txp_users" where="user_id" is="1" />

Returns: Last access time for site admin with user ID of 1.

h3. Counting number of articles

p. Counting is done with Textpattern's @safe_count()@ function.

bc. <txp:rah_function call="safe_count" table="textpattern" where="Status IN(4, 5)" />

Returns: number of articles.

h2. Changelog

h3. Version 0.5 - upcoming

* Added: Ability to call class methods (@call="Class->Method"@ and @call="Class::StaticMethod"@).
* Added: Multiple functions can be called with a single tag instance (@call="func1, func2, func3"@). Output is passed by reference from function to function. First function in the list is treated as the primary and given tag attributes only apply to it.
* Added: Arrays are returned as serialized string and can be passed from one tag instance to other. Serialized output can be extracted by prefixing used tag attribute name with @_serialized@.
* Added: Converts returned booleans to uppercase strings, @TRUE@ and @FALSE@. This makes it possible to identify integers from booleans (e.g. strpos).
* Added: Return arrays as serialized strings.
* Added: Function whitelisting option.
* Improved: Prevent passing non-scalars to the template.
* Improved: Moved away from sanitization and @eval()@.
* Improved: Show some error messages when needed.
* Updated: Code structure.
* Updated: Help file (readme).

h3. Version 0.4 - 2011/12/16

* Improved: Do not use attributes' real names in the function call, but use an temp array. Makes sure attributes get resolved as valid variables no matter what is passed by Textpattern's parser to the plugin.

h3. Version 0.3 - 2011/07/08

* Fixed: Now empty, nothing-at-all, string can be used as the container-mode's wrapped statement.
* Added: Now makes sure that the called function is really defined before executing anything.

h3. Version 0.2 - 2009/11/28

* Added attribute: @thing@. Thanks you "Ruud":http://forum.textpattern.com/viewtopic.php?pid=220042#p220042 for the suggestion.

h3. Version 0.1.1 - 2009/11/21

* Added @has_privs()@ and @allow_scripting@ checks.

h3. Version 0.1 - 2009/11/21

* First release