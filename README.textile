h1. rah_function

p. Every function is a @<txp:tag />@. Rah_function allows you to call any PHP function in Textpattern's tag syntax. No need for PHP snippets, ending nor closing PHP tags -- only thing you need is a XML like tag.

h2. List of features

* Call any PHP function with a single TXP tag.
* Freely use function's attributes, flags and parameters.
* Supports both, a container and a single tag format.

h2. Requirements

* Textpattern 4.0.7 or newer.

h2. Installation

p. Rah_function's installation follows the usual standard plugin installation steps.

# Download the plugin installation code.
# Copy and paste installation code into your Textpattern installation's Plugin pane's "Install plugin" box.
# Run the automated setup.
# After the setup is done, activate the plugin. Done.

p. The plugin respects Textpattern's scripting preferences. After installation make sure that you have allowed PHP scripting:

# Go to Textpattern's Advanced Preferences (Textpattern > Admin > Preferences > Advanced).
# Toggle allow on PHP scripting for Pages and Articles (or for where you want to use the plugin).

h2. Tag attributes

bc. <txp:rah_function call="function" thing="here" parameter1="value" parameter2="value">
	Contained statement
</txp:rah_function>

p. The plugin introduces a new tag, @<txp:rah_function />@. It's a multi-purpose tag that allows to use public PHP functions and methods as Textpattern tags. The tag can be used both as container and in self-closing mode. Attributes for the are as follows.

p. *call*
The name of the function or class method you want to use with the tag. Comma-separated if multiple. This attribute is required.
Example: @call="base64_encode"@ Default: @""@

p. *thing*
With thing you can choose the argument place for container mode's contained statement. For example, if @thing="here"@ is the last defined attribute in the tag, then the contained statement is used as the last argument too for the PHP function. If @thing@ is left undefined, contained statement is used as the first argument.
Example: @foo="bar" thing="here" bar="foo"@ Default: _undefined_.

p. *parameter1="" , parameter2="" , parameter3="",[..]*
Zero or more parameters passed to the called function as arguments. Theses additional tag attributes can be named anything. The parameters are assigned to the function in the order they are defined in the tag.
Example: @foo2="bar" foo1="bar" foo4="bar"@ Default: _undefined_.

h2. Tag basics

p. The tag, @<txp:rah_function />@, is almost like a bridge between PHP and Textpattern tag syntax. It allows calling almost any internal PHP function as a Textpattern tag, opening new possibilities for Textpattern tags. Want to encode something? You can. Want use PHP's string functions to truncate, count and modify? You can. All without needing to write source code for new tags, or result using raw PHP blocks in page templates.

p. The tag supports both a container and self-closing tag usage. If the tag is used in a container format, the contained statement is used in the parameter position specified with the tag's @thing="here"@ attribute. If @thing@ attribute is undefined, contained statement is used as the PHP function's first parameter.

p. Below snippet, the contained statement @Hi World!@, is used as "str_replace":http://php.net/manual/en/function.str-replace.php function's third parameter as that is where the @thing="here"@ is specified.

bc. <txp:rah_function call="str_replace" from="Hi" to="Hello" thing="here">
	Hi World!
</txp:rah_function>

p. The snippet returns @Hello World!@, as expected. If @thing@ attribute wasn't used, the contained statement would be used as first argument, leading to different results.

bc. <txp:rah_function call="str_replace" from="Hi" to="Hello">
	Hi World!
</txp:rah_function>

p. Still looks pretty much the same. But unlike previously with @thing@, now the tag returns @Hello@. Instead of the @to@ attribute, the contained statement would be used the searched needle in str_replace.

p. Apart from tag's own reserved attributes, @thing@ and @call@, all attributes, are passed to the called function as arguments in the order the attributes are defined. When calling "md5,":http://php.net/manual/en/function.md5.php the first attribute would be used as the string from which the hash is calculated.

bc. <txp:rah_function call="md5" str="apple" />

p. Above returns, @1f3870be274f6c49b3e31a0c6728957f@, a MD5 hash of apple. If no additional attributes are used, then the called PHP function is used as is, without arguments.

h2. Function whitelisting

p. For added optional security, certain functions can be explicitly whitelisted. If whitelisting option is defined, then only those whitelisted functions can be called with a rah_function tag.

p. Whitelisting options can be set from Textpattern's @config.php@ (e.g. /textpattern/config.php) file, and doesn't take more than adding a single line to it. Rah_function expects a constant named @rah_function_whitelist@, populated with comma-separated list of function names.

bc. define('rah_function_whitelist', 'gps, ps, htmlspecialchars, str_replace');

p. Where @gps@, @ps@, @htmlspecialchars@ and @str_replace@ would be the allowed functions.

p. This whitelisting option is completely optional, and it doesn't need to be configured. It should be only used if you want to enable only certain functions for added security.

h2. Examples

h3. Basic usage of base64_encode as a container

bc. <txp:rah_function call="base64_encode">
	Hello world!
</txp:rah_function>

p. Returns base64 encoded string: @DQoJSGVsbG8gd29ybGQhDQo=@

h3. Replacing content using str_replace in a single tag mode

bc. <txp:rah_function call="str_replace" search="Hello" replace="Hi" subject="Hello world!" />

p. Returns: @Hi world!@

h3. Replacing content using str_replace and containers

p. Contained statement is used as "str_replace":http://php.net/manual/en/function.str-replace.php's _subject_ parameter. Wrapped content is positioned to correct location by using @thing="here"@ in the tag.

bc. <txp:rah_function call="str_replace" search="Hello" replace="Hi" thing="here">
	Hello world!
</txp:rah_function>

p. Returns: @Hi world!@

h3. Sanitizing and returning HTTP GET value

p. Returning GET/POST values and sanitizing the output can be done with a single rah_function tag instance by using plugin's multi-function call feature. First we would use Textpattern's @gps@ function to get a specific value, e.g. @theme@, and then prepare it for the page template by converting HTML's special characters to entities with "htmlspecialchars":http://php.net/manual/en/function.htmlspecialchars.php.

bc. <txp:rah_function call="gps, htmlspecialchars" name="theme" />

p. Above would return HTTP GET/POST param's, named @theme@, value. If requested value is @?theme=I<3TXP@, above would return safe string of @I&lt;3TXP@.

h3. Removing appending and prepending whitespace or other characters

p. Wrapped content is passed to "trim":http://php.net/manual/en/function.trim.php function, which is set to strip @H@ characters from the beginning and the end.

bc. <txp:rah_function call="trim" charlist="H">
	Hello world!
</txp:rah_function>

p. Returns: @ello world!@

h3. Returning time using safe_strftime()

bc. <txp:rah_function call="safe_strftime">
	%Y
</txp:rah_function>

p. Returns: @2009@.

h3. Fetching a single field from the database with fetch() function

bc. <txp:rah_function call="fetch" what="last_access" from="txp_users" where="user_id" is="1" />

Returns: Last access time for site admin with user ID of 1.

h3. Counting the amount of articles in the current section

p. Counting is done with Textpattern's @safe_count()@ function.

bc. <txp:rah_function call="safe_count" table="textpattern" where='Section="<txp:section />"' />

Returns: number of articles.

h2. Changelog

h3. Version 0.5 - upcoming

* Added: Ability to call class methods (@call="Class->Method"@ and @call="Class::StaticMethod"@).
* Added: Multiple functions can be called with a single tag instance (@call="func1, func2, func3"@). Output is passed by reference from function to function. First function in the list is treated as the primary and given tag attributes only apply to it.
* Added: Arrays are returned as serialized string and can be passed from one tag instance to other. Serialized output can be extracted by prefixing used tag attribute name with @_serialized@.
* Added: Converts returned booleans to uppercase strings, @TRUE@ and @FALSE@. This makes it possible to identify integers from booleans (e.g. strpos).
* Added: Return arrays as serialized strings.
* Added: Function whitelisting option.
* Improved: Prevent passing non-scalars to the template.
* Improved: Moved away from sanitization and @eval()@.
* Improved: Show some error messages when needed.
* Updated: Code structure.
* Updated: Help file (readme).

h3. Version 0.4 - 2011/12/16

* Improved: Do not use attributes' real names in the function call, but use an temp array. Makes sure attributes get resolved as valid variables no matter what is passed by Textpattern's parser to the plugin.

h3. Version 0.3 - 2011/07/08

* Fixed: Now empty, nothing-at-all, string can be used as the container-mode's wrapped statement.
* Added: Now makes sure that the called function is really defined before executing anything.

h3. Version 0.2 - 2009/11/28

* Added attribute: @thing@. Thanks you "Ruud":http://forum.textpattern.com/viewtopic.php?pid=220042#p220042 for the suggestion.

h3. Version 0.1.1 - 2009/11/21

* Added @has_privs()@ and @allow_scripting@ checks.

h3. Version 0.1 - 2009/11/21

* First release